"""
Django settings for mota_backend project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""


from pathlib import Path
import os
import environ
import rollbar
import sys
import json

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# @ 환경변수
env = environ.Env(DEBUG=(bool, True))
environ.Env.read_env(
    env_file=os.path.join(BASE_DIR, '.env')
)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# ! 시크릿키 (깃허브 업로드 금지!!)
SECRET_KEY = env('SECRET_KEY')

# ! 디버그 사용여부 (설정하기)
DEBUG = env('DEBUG')

# ! PUSH 할 때 : 해당 구문 주석 변환 / DEBUG=False로 
# * 허용된 호스트
if DEBUG:
    ALLOWED_HOSTS = [
        ".ap-northeast-2.compute.amazonaws.com",
        "13.209.245.172",
        "dev.app.mota.mobi",
        "localhost", "127.0.0.1"
    ]
else:
    ALLOWED_HOSTS = [
        ".ap-northeast-2.compute.amazonaws.com",
        "app.mota.mobi",
    ]


# * 설치된 앱
INSTALLED_APPS = [
    'django.contrib.admin',         # 관리용 사이트
    'django.contrib.auth',          # 인증 시스템
    'django.contrib.contenttypes',  # 컨텐츠 타입을 위한 프레임워크
    'django.contrib.sessions',      # 세션 프레임워크
    'django.contrib.messages',      # 메세징 프레임워크
    'django.contrib.staticfiles',   # 정적 파일 관리 프레임워크
    'rest_framework',               # DRF : Django REST framework
    'drf_yasg',                     # API 문서화 관련
    'mota.apps.MotaConfig',
    'storages',                     # s3
    'django_crontab',               # 주기적 작업 실행
    'rangefilter',                  # admin site의 filtering 지정
    'firebase',                     # Firebase Auth, FCM
    #'chat',                         # django channel 기반 채팅
]

# * ROLLBAR 설정
ROLLBAR = {
    'access_token': env('ROLLBAR_ACCESS_TOKEN'),
    'environment': 'development' if DEBUG else 'production',
    'branch': 'main',
    'root': BASE_DIR,
}
rollbar.init(**ROLLBAR)

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'rollbar.contrib.django.middleware.RollbarNotifierMiddlewareExcluding404',
]

ROOT_URLCONF = 'moyeobayo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'moyeobayo.wsgi.application'

# * REST FRAMEWORK
if DEBUG:
    REST_FRAMEWORK = {
        # * 기본 인증 클레스 : 만약 인증이 없어도 접속가능하게 하려면 재정의해야함 
        # "DEFAULT_AUTHENTICATION_CLASSES": (
        #     # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 장고 RESTAPI JWT
        #     'rest_framework.authentication.SessionAuthentication',
        #     'firebase.authentication.FirebaseAuthentication'                    # 사용자 지정 인증 백엔드
        # ),
        "DEFAULT_AUTHENTICATION_CLASSES": (
            # 'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # 장고 RESTAPI JWT
            #'rest_framework.authentication.SessionAuthentication',
            #'firebase.authentication.FirebaseAuthentication'                    # 사용자 지정 인증 백엔드
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.AllowAny',
        ),
        'EXCEPTION_HANDLER': 'rollbar.contrib.django_rest_framework.post_exception_handler',
    }
else:
    REST_FRAMEWORK = {
        "DEFAULT_AUTHENTICATION_CLASSES": (
            'rest_framework.authentication.SessionAuthentication',
            'firebase.authentication.FirebaseAuthentication'                    # 사용자 지정 인증 백엔드
        ),
        'DEFAULT_PERMISSION_CLASSES': (
            'rest_framework.permissions.IsAuthenticated',
        ),
        'EXCEPTION_HANDLER': 'rollbar.contrib.django_rest_framework.post_exception_handler',
    }

# # * JWT 토큰 
# JWT_AUTH = {
#     'JWT_SECRET_KEY': SECRET_KEY,
#     'JWT_ALGORITHM': 'HS256',
#     'JWT_ALLOW_REFRESH': True,                                      # 토큰 갱신 여부
#     'JWT_EXPIRATION_DELTA': datetime.timedelta(days=7),             # JWT 토큰 유효기간
#     'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=28),    # JWT 토큰 갱신 유효기간
# }

# * PostgreSQL Setting
DATABASES = {
    'default' : {
        'ENGINE' : 'django.db.backends.postgresql',
        'NAME': env('DJANGO_DB_NAME'),                                 # DB NAME
        'USER': env('DJANGO_DB_USER'),                                 # USER ID
        'PASSWORD': env('DJANGO_DB_PASSWORD'),        # USER PW
        'HOST': env('DJANGO_DB_HOST'),                            # PostgreSQL 서버 주소
        'PORT': env('DJANGO_DB_PORT'),                                 # PostgreSQL 서버 포트번호
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

SWAGGER_SETTINGS = {
   'USE_SESSION_AUTH': False
}

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ko-kr'

# * 시간대 설정
TIME_ZONE = 'Asia/Seoul'

USE_I18N = True                

# * 일광절약시간제 사용 여부
USE_TZ = False                   # 한국 : False

# * 주기적 실행 설정
CRONJOBS = [
    ('*/5 * * * *', 'mota.cron.carpool_end', '>> '+os.path.join(BASE_DIR, 'logs/carpool_end.log')+' 2>&1 '),
    ('0 */4 * * *', 'mota.cron.notices_delete', '>> '+os.path.join(BASE_DIR, 'logs/notices_delete.log')+' 2>&1 '),
    ('0 */4 * * *', 'mota.cron.approved_delete', '>> '+os.path.join(BASE_DIR, 'clogs/approved_delete.log')+' 2>&1 ')
]

# * 로깅 설정
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    'formatters': {
        'verbose': {
            'format': "[%(asctime)s %(levelname)s [%(name)s:%(lineno)s] %(message)s",
            'datefmt': "%d%b%Y %H:%M:%S"
        },
        'simple': {
            'format': '%(asctime)s %(levelname)s %(message)s'
        },
    },
    # 핸들러 3개 정의
    'handlers': {
        'file-debug': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filters': ['require_debug_true'],
            'filename': 'logs/logs-debug.log',        # message가 저장될 파일명(파일명 변경 가능)
            'formatter': 'verbose'
        },
        'file-release': {
            'level': 'ERROR',
            'class': 'logging.FileHandler',
            'filters': ['require_debug_false'],
            'filename': 'logs/logs-release.log',        # message가 저장될 파일명(파일명 변경 가능)
            'formatter': 'verbose'
        },
        'rollbar': {
            'level': 'ERROR',
            'access_token': env('ROLLBAR_ACCESS_TOKEN'),
            'class': 'rollbar.logger.RollbarHandler',
        },
    },
    # 로그 메시지를 헨들러에 전송
    'loggers': {
        'django': {
            'handlers': ['file-debug', 'file-release', 'rollbar'],
            'level': 'INFO',
            'propagate': True,
        },
    }
}

if len(sys.argv) > 1 and sys.argv[1] == 'test':
    # 테스트를 실행할 때 로깅을 비활성화
    LOGGING['loggers'] = {
        'django': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
    LOGGING['handlers'] = {
        'null': {
            'class': 'logging.NullHandler',
        },
    }

# * AWS Setting
AWS_REGION = env('AWS_REGION')   #AWS서버의 지역
AWS_STORAGE_BUCKET_NAME = env('AWS_STORAGE_BUCKET_NAME')       #생성한 버킷 이름
AWS_ACCESS_KEY_ID = env('AWS_ACCESS_KEY_ID')             #액서스 키 ID
AWS_SECRET_ACCESS_KEY = env('AWS_SECRET_ACCESS_KEY')         #액서스 키 PW

AWS_QUERYSTRING_AUTH = False
AWS_LOCATION = 'static'
AWS_S3_HOST = 's3.%s.amazonaws.com' % AWS_REGION
AWS_S3_CUSTOM_DOMAIN = '%s.s3.%s.amazonaws.com' % (AWS_STORAGE_BUCKET_NAME, AWS_REGION)
AWS_DEFAULT_ACL = None
AWS_S3_OBJECT_PARAMETERS = {
    'CacheControl': 'max-age=86400',
}

DATA_UPLOAD_MAX_MEMORY_SIZE = 1024000000
FILE_UPLOAD_MAX_MEMORY_SIZE = 1024000000

# * Static Setting
STATIC_LOCATION = 'static'
STATIC_ROOT = os.path.join(os.path.abspath(__file__), 'static')
STATIC_URL = "https://%s/%s/" % (AWS_S3_CUSTOM_DOMAIN, STATIC_LOCATION)
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

# * Media Setting

MEDIA_LOCATION = 'media'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = "https://%s/meida/" % AWS_S3_CUSTOM_DOMAIN
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# # * FIREBASE 
# FIREBASE_JSON = env('FIREBASE_JSON') 